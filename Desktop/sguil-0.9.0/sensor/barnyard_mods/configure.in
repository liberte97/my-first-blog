# $Id: configure.in,v 1.2 2005/03/08 20:37:40 bamm Exp $ 
AC_INIT(src/barnyard.c)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(barnyard,0.2.0)
AM_PROG_CC_STDC
AC_PROG_RANLIB

default_directory="/usr /usr/local"

AC_PROG_CC
 if test -n "$GCC"; then
      CFLAGS="$CFLAGS -Wall"
 fi

AC_ARG_ENABLE(debug,
[  --enable-debug       enable debugging options (bugreports and developers only)],
                [ if test -n "$GCC"; then
                    CFLAGS="$CFLAGS -DDEBUG -ggdb"
                  else
                    CFLAGS="$CFLAGS -DDEBUG"
                  fi      
                ],)



AC_CANONICAL_HOST
linux=no
sunos4=no

AC_C_BIGENDIAN
SHELL="/bin/sh"
AC_SUBST(extra_incl)

case "$host" in
  *-openbsd2.6|*-openbsd2.5|*-openbsd2.4|*-openbsd2.3*)
    AC_DEFINE(OPENBSD)
    AC_DEFINE(BROKEN_SIOCGIFMTU)

    ;;
  *-openbsd*)
    AC_DEFINE(OPENBSD)

    ;;
  *-sgi-irix5*)
    AC_DEFINE(IRIX)
    no_libsocket=yes
    no_libnsl=yes
    if test -z "$GCC"; then
      sgi_cc=yes
    fi
    LDFLAGS=${LDFLAGS} -L/usr/local/lib
    extra_incl=-I/usr/local/include
    ;;
  *-sgi-irix6*)
    AC_DEFINE(IRIX)
    no_libsocket=yes
    no_libnsl=yes
    if test -z "$GCC"; then
      sgi_cc=yes
    fi
    LDFLAGS=${LDFLAGS} -L/usr/local/lib
    extra_incl=-I/usr/local/include
    ;;
  *-solaris*)
    AC_DEFINE(SOLARIS)
    CPPFLAGS="${CPPFLAGS} -DBSD_COMP"
    LDFLAGS="${LDFLAGS} -lnsl"
    ;;
  *-sunos*)
    AC_DEFINE(SUNOS)
    sunos4=yes
    ;;
  *-linux*)
    linux=yes
    AC_DEFINE(LINUX)
    AC_DEFINE(PCAP_TIMEOUT_IGNORED)  # libpcap doesn't even LOOK at
                                     # the timeout you give it under Linux
    extra_incl=-I/usr/include/pcap
    ;;
  *-hpux10*)
    AC_DEFINE(HPUX)
    AC_DEFINE(WORDS_BIGENDIAN)
    AC_SUBST(extra_incl)
    extra_incl=-I/usr/local/include
    ;;

  *-freebsd*)
    AC_DEFINE(FREEBSD)

    ;;
  *-bsdi*)
    AC_DEFINE(BSDI)
    ;;
  *-aix*)
    AC_DEFINE(AIX)
     broken_types=yes
    ;;
  *-osf4*)
    AC_DEFINE(OSF1)
    tru64_types=yes
    ;;
  *-osf5.1*)
    AC_DEFINE(OSF1)
    ;;
  *-tru64*)
    AC_DEFINE(OSF1)
    tru64_types=yes
    ;;
# it is actually <platform>-apple-darwin1.2 or <platform>-apple-rhapsody5.x but lets stick with this for the moment    
  *-apple*)
    AC_DEFINE(MACOS)
    AC_DEFINE(BROKEN_SIOCGIFMTU)
    default_directory="${default_directory} /sw"
esac

# any sparc platform has to have this one defined. 
if test "$host_cpu" = "sparc"; then
     AC_DEFINE(WORDS_MUSTALIGN)
fi

dnl checking headers
AC_CHECK_HEADERS(strings.h)
AC_CHECK_HEADERS(string.h)
AC_CHECK_HEADERS(stdlib.h)
AC_CHECK_HEADERS(unistd.h)
AC_CHECK_HEADERS(sys/sockio.h)
AC_CHECK_HEADERS(paths.h)

dnl make sure we've got all our libraries
dnl if test -z "$no_libnsl"; then
dnl AC_CHECK_LIB(nsl, inet_ntoa)
dnl fi

if test -z "$no_libsocket"; then
AC_CHECK_LIB(socket, socket)
fi

# SunOS4 has several things `broken'
if test  "$sunos4" != "no"; then
AC_CHECK_FUNCS(vsnprintf,, LIBS=" $LIBS -ldb")
AC_CHECK_FUNCS(strtoul,, LIBS=" $LIBS -l44bsd")
fi

# some funky macro to be backwards compatible with earlier autoconfs
# in current they have AC_CHECK_DECLS

AC_DEFUN(SN_CHECK_DECL,[
AC_MSG_CHECKING([whether $1 must be declared])
AC_CACHE_VAL(sn_cv_decl_needed_$1,
[AC_TRY_COMPILE([
#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#ifdef HAVE_STRINGS_H
#include <strings.h>
#endif
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <sys/types.h>
#include <sys/socket.h>
#include <syslog.h>
],
[char *(*pfn) = (char *(*)) $1], 
eval "sn_cv_decl_needed_$1=no",eval "sn_cv_decl_needed_$1=yes") ])

if eval "test \"`echo '$sn_cv_decl_needed_'$1`\" != no"; then 
 AC_MSG_RESULT(yes)
 ifelse([$2], , :, [$2])
else
 AC_MSG_RESULT(no)
 ifelse([$3], , ,[$3])
fi
])dnl

AC_DEFUN(SN_CHECK_DECLS,
[for sn_decl in $1
do
sn_def_decl=`echo $sn_decl | tr [a-z] [A-Z]`
SN_CHECK_DECL($sn_decl,
[
AC_DEFINE_UNQUOTED(NEED_DECL_$sn_def_decl, 1,
                  [you have this cuz autoheader is dumb])
$2], $3)dnl
done
])

# some stuff for declarations which were missed on sunos4 platform too.
#
# add `#undef NEED_DECL_FUNCTIONAME to acconfig.h` because autoheader
# fails to work properly with custom macroses.
# you will see also #undef for each SN_CHECK_DECLS macros invocation
# because autoheader doesn't execute shell script commands.
# it is possible to make loops using m4 but the code would look even
# more confusing.. 
SN_CHECK_DECLS(printf fprintf syslog puts fputs fputc fopen  \
           fclose fwrite fflush getopt bzero bcopy memset strtol  \
           strcasecmp strncasecmp strerror perror socket sendto   \
           vsnprintf snprintf strtoul)

AC_CHECK_FUNCS(snprintf)
AC_CHECK_FUNCS(strlcpy)
AC_CHECK_FUNCS(strlcat)
AC_CHECK_FUNCS(strerror)

AC_TRY_COMPILE([
#include <stdio.h>
],[char *foo; foo = sys_errlist[0];], AC_DEFINE(ERRLIST_PREDEFINED))


AC_DEFUN(FAIL_MESSAGE,[
   echo
   echo
   echo "**********************************************"
   echo "  ERROR: unable to find" $1
   echo "  checked in the following places"
   for i in `echo $2`; do
     echo "        $i"
   done
   echo "**********************************************"
   echo
   exit
])


dnl mysql support 
AC_ARG_ENABLE(mysql,
    [  --enable-mysql                 MySQL database support])
AC_ARG_WITH(mysql_includes,
     [  --with-mysql-includes=DIR     MySQL include directory],
     [ mysql_includes="$withval"])
AC_ARG_WITH(mysql_libraries,
     [  --with-mysql-libraries=DIR    MySQL libraries directory],
     [ mysql_libs="$withval"])

if test "$enable_mysql" = "yes"; then

  CPPFLAGS="${CPPFLAGS} -DENABLE_MYSQL"
  dnl check for MySQL libraries and includes
    
  dnl set the include dir
  if test -z "$mysql_includes"; then
    for i in $default_directory; do
      if test -r $i/include/mysql/mysql.h; then
        MYSQL_DIR=$i
        MYSQL_INC_DIR=$i/include/mysql
      elif test -r $i/include/mysql.h; then
        MYSQL_DIR=$i
        MYSQL_INC_DIR=$i/include
      fi
    done
  else
    MYSQL_INC_DIR=$mysql_includes
  fi

  dnl check for the header
  CPPFLAGS="-I${MYSQL_INC_DIR} ${CPPFLAGS}"
  AC_CHECK_HEADER($MYSQL_INC_DIR/mysql.h, FOUND=yes, FOUND=no)

  if test "$FOUND" = "no"; then
      FAIL_MESSAGE("mysql headers (mysql.h)", "$MYSQL_INC_DIR/mysql.h")
  fi

  dnl set the libraries dir
  if test -z "$mysql_libs"; then
    for i in lib lib/mysql; do
      str="${MYSQL_DIR}/$i/libmysqlclient.*"
      for j in `echo $str`; do
        if test -r $j; then
            MYSQL_LIB_DIR="${MYSQL_DIR}/$i"
          fi
      done
    done
  else
    MYSQL_LIB_DIR=$mysql_libs
  fi

  dnl check for the header
  LDFLAGS="${LDFLAGS} -L${MYSQL_LIB_DIR}"
  LIBS="${LIBS} -lz -lssl -lmysqlclient"
  AC_CHECK_LIB(mysqlclient, mysql_real_connect, FOUND=yes, FOUND=no)

  if test "$FOUND" = "no"; then
      FAIL_MESSAGE("mysqlclient library", "$MYSQL_LIB_DIR")
  fi
    
fi

AC_ARG_ENABLE(tcl,
	[  --enable-tcl           Enable Tcl language support.],,
	[enable_tcl="no"])
dnl AC_MSG_RESULT($enable_tcl)

if test "yes" = "$enable_tcl"; then

    dnl let tclsh tell us where it was
	dnl installed (prefer new tcl versions).
	AC_CHECK_PROGS(TCLSH, tclsh8.4 tclsh8.3 tclsh8.2 tclsh8.1 tclsh8.0 tclsh)
    if test "$TCLSH" != ""; then
        tclpath=`echo 'puts [[lindex $tcl_pkgPath 0]]' | $TCLSH`
    fi

    dnl let the user overwrite the installation
	dnl directory which was just found.
	AC_ARG_WITH(tcl,
		[  --with-tcl=PATH         Location of tclConfig.sh],
		tclpath="$withval")

	dnl check, if tclConfig.sh can be found in
	dnl tclsh's installation directory.
    if test ! -r $tclpath/tclConfig.sh; then
		AC_MSG_RESULT(
		[
	Can't find Tcl libraries.  Use --with-tcl to specify
        the directory containing tclConfig.sh on your system.
	Continuing build without Tcl support.])
    else
	dnl source tclsh's configuration file
	dnl and tell the user about the version.
	. $tclpath/tclConfig.sh
	AC_MSG_CHECKING([for the tcl version number])
	AC_MSG_RESULT([$TCL_VERSION, patchlevel $TCL_PATCH_LEVEL])
        LIBS="$LIBS $TCL_LIBS $TCL_LIB_SPEC"
	TCL_INCLUDE="$TCL_PREFIX/include/tcl$TCL_VERSION"
	CPPFLAGS="$CPPFLAGS -I$TCL_INCLUDE -DENABLE_TCL";
    fi
fi


dnl mysql support 
AC_ARG_ENABLE(postgres,
    [  --enable-postgres              PostgreSQL database support])
AC_ARG_WITH(postgres_includes,
     [  --with-postgres-includes=DIR  PostgreSQL include directory],
     [ postgres_includes="$withval"])
AC_ARG_WITH(postgres_libraries,
     [  --with-postgres-libraries=DIR PostgreSQL libraries directory],
     [ postgres_libs="$withval"])

if test "$enable_postgres" = "yes"; then

  CPPFLAGS="${CPPFLAGS} -DENABLE_POSTGRES"
  dnl check for PostgreSQL libraries and includes
    
  dnl set the include dir
  if test "$postgres_includes" = ""; then
    POSTGRES_INC_DIR=`pg_config --includedir`
  else
    POSTGRES_INC_DIR=$postgres_includes
  fi

  dnl check for the header
  CPPFLAGS="-I${POSTGRES_INC_DIR} ${CPPFLAGS}"
  AC_CHECK_HEADER($POSTGRES_INC_DIR/libpq-fe.h, FOUND=yes, FOUND=no)

  if test "$FOUND" = "no"; then
      FAIL_MESSAGE("postgres headers (libpq-fe.h)", "$POSTGRES_INC_DIR/libpq-fe.h")
  fi

  dnl set the libraries dir
  if test "$postgres_libs" = ""; then
    POSTGRES_LIB_DIR=`pg_config --libdir`
  else
    POSTGRES_LIB_DIR=$postgres_libs
  fi

  dnl check for the library
  LDFLAGS="${LDFLAGS} -L${POSTGRES_LIB_DIR}"
  LIBS="${LIBS} -lpq"
  AC_CHECK_LIB(pq, PQsetdbLogin, FOUND=yes, FOUND=no)
  if test "$FOUND" = "no"; then
      FAIL_MESSAGE("postgresql library", "$POSTGRES_LIB_DIR")
  fi
    
fi

if test "$tru64_types" = "yes"; then
        AC_CHECK_TYPE(u_int8_t, unsigned char)
        AC_CHECK_TYPE(u_int16_t, unsigned short)
        AC_CHECK_TYPE(u_int32_t, unsigned int)
else
	if test "$broken_types" = "yes" ; then
		AC_CHECK_TYPE(u_int8_t, unsigned char)
		AC_CHECK_TYPE(u_int16_t, unsigned short)
		AC_CHECK_TYPE(u_int32_t, unsigned long int)
	else
		AC_CHECK_TYPE(u_int8_t, uint8_t)
		AC_CHECK_TYPE(u_int16_t, uint16_t)
		AC_CHECK_TYPE(u_int32_t, uint32_t)
	fi
fi


# let's make some fixes..

CFLAGS=`echo $CFLAGS | sed -e 's/-I\/usr\/include //g'`
CPPFLAGS=`echo $CPPFLAGS | sed -e 's/-I\/usr\/include //g'`

AC_PROG_INSTALL
AC_OUTPUT(Makefile src/Makefile src/input-plugins/Makefile
	src/output-plugins/Makefile )
	

