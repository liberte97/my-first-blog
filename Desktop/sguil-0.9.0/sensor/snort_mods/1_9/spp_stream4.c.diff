*** spp_stream4.c.orig	Thu Aug 15 09:13:56 2002
--- spp_stream4.c	Tue Feb 18 10:37:04 2003
***************
*** 33,38 ****
--- 33,56 ----
   *
   */
  
+ /* Added a new stats type "db". The main purpose is to get session stats loaded
+  * into the database for datamining using sguil (http://www.satexas.com/~bamf/sguil/).
+  * 
+  * Config from snort.conf:
+  * keepstats db /log/dir
+  *
+  *
+  * Output is pipe deliminated and a new file (/log/dir/ssn_log.<milliseconds>)
+  * is created each time the deleted sessions are flushed (see FLUSH_DELAY):
+  *
+  * xid|start_time|end_time|src_ip|dst_ip|src_port|dst_port|src_pckts|dst_pckts|src_bytes|dst_bytes
+  *
+  * xid is the time in milliseconds at SessionDelete.
+  *
+  *
+  * Bammkkkk
+ */
+ 
  /*  I N C L U D E S  ************************************************/
  #include <sys/types.h>
  #include <stdlib.h>
***************
*** 45,50 ****
--- 63,69 ----
  #endif /* WIN32 */
  #include <time.h>
  #include <rpc/types.h>
+ #include <unistd.h>
  
  #include "decode.h"
  #include "event.h"
***************
*** 114,119 ****
--- 133,139 ----
  #define STATS_HUMAN_READABLE   1
  #define STATS_MACHINE_READABLE 2
  #define STATS_BINARY           3
+ #define STATS_DB               4
  
  #define STATS_MAGIC  0xDEAD029A   /* magic for the binary stats file */
  
***************
*** 147,152 ****
--- 167,175 ----
  
  
  
+ /* How often to flush if using STATS_DB */
+ #define FLUSH_DELAY 30000
+ 
  /*  D A T A   S T R U C T U R E S  **********************************/
  typedef struct _Stream4Data
  {
***************
*** 226,231 ****
--- 249,271 ----
      u_int32_t cbytes;
  } BinStats;
  
+ typedef struct _DbStats
+ {
+     long xid;
+     char start_time[20];
+     char end_time[20];
+     u_int32_t sip;
+     u_int32_t cip;
+     u_int16_t sport;
+     u_int16_t cport;
+     u_int32_t spackets;
+     u_int32_t cpackets;
+     u_int32_t sbytes;
+     u_int32_t cbytes;
+     struct _DbStats *next;
+ } DbStats;
+ 
+ 
  typedef struct _StatsLog
  {
      FILE *fp;
***************
*** 264,269 ****
--- 304,312 ----
  u_int32_t stream4_memory_usage;
  u_int32_t ps_memory_usage;
  extern int do_detect;
+ DbStats *dbsPtr = NULL;
+ long LastFlushTime;
+ char DBLOGDIR[STD_BUF];
  
  
  /*  P R O T O T Y P E S  ********************************************/
***************
*** 296,301 ****
--- 339,347 ----
  void OpenStatsFile();
  static int RetransTooFast(struct timeval *a, struct timeval *b);
  
+ DbStats *AddDbStats(DbStats * dbsPtr, Session * ssn);
+ DbStats *FlushDbStats(DbStats * dbsPtr);
+ 
  /*
    Here is where we separate which functions will be called in the
    normal case versus in the asynchronus state
***************
*** 310,317 ****
  static void TcpActionAsync(Session *ssn, Packet *p, int action, int direction, 
                             u_int32_t pkt_seq, u_int32_t pkt_ack);
  
  
-     
  
  static int CompareFunc(ubi_trItemPtr ItemPtr, ubi_trNodePtr NodePtr)
  {
--- 356,469 ----
  static void TcpActionAsync(Session *ssn, Packet *p, int action, int direction, 
                             u_int32_t pkt_seq, u_int32_t pkt_ack);
  
+ long TimeMilliseconds()
+ {
+     struct timeval  tv;
+     gettimeofday(&tv, NULL);
+ 
+     return (long)(tv.tv_sec * 1000 + tv.tv_usec / 1000);
+ }
+ 
+ DbStats *AddDbStats(DbStats *dbsPtr, Session *ssn)
+ {
+ 
+   DbStats *dbs = dbsPtr;
+   register int s;
+   struct tm *lt;
+   struct tm *et;
+ 
+   if (dbsPtr != NULL)
+   {
+ 
+     while (dbsPtr->next != NULL)
+       dbsPtr = dbsPtr->next;
+ 
+     dbsPtr->next = (DbStats *) malloc (sizeof (DbStats));
+     dbsPtr=dbsPtr->next;
+     dbsPtr->next = NULL;
+ 
+     dbsPtr->xid = TimeMilliseconds();
+ 
+     lt = localtime((time_t *) &ssn->start_time);
+     s = (ssn->start_time + thiszone) % 86400;
+     sprintf(dbsPtr->start_time, "%02d-%02d-%02d %02d:%02d:%02d", 1900 + lt->tm_year,
+            lt->tm_mon+1, lt->tm_mday, s/3600, (s%3600)/60, s%60);
+ 
+     et = localtime((time_t *) &ssn->last_session_time);
+     s = (ssn->last_session_time + thiszone) % 86400;
+     sprintf(dbsPtr->end_time, "%02d-%02d-%02d %02d:%02d:%02d", 1900 + et->tm_year,
+                et->tm_mon+1, et->tm_mday, s/3600, (s%3600)/60, s%60);
+ 
+     dbsPtr->sip = ntohl(ssn->server.ip);
+     dbsPtr->cip = ntohl(ssn->client.ip);
+     dbsPtr->sport = ssn->server.port;
+     dbsPtr->cport = ssn->client.port;
+     dbsPtr->spackets = ssn->server.pkts_sent;
+     dbsPtr->cpackets = ssn->client.pkts_sent;
+     dbsPtr->sbytes = ssn->server.bytes_sent;
+     dbsPtr->cbytes = ssn->client.bytes_sent;
+     return dbs;
+ 
+   } else {
+ 
+     dbsPtr = (DbStats *) malloc (sizeof (DbStats));
+     dbsPtr->next = NULL;
+ 
+     dbsPtr->xid = TimeMilliseconds();
+ 
+     lt = localtime((time_t *) &ssn->start_time);
+     s = (ssn->start_time + thiszone) % 86400;
+     sprintf(dbsPtr->start_time, "%02d-%02d-%02d %02d:%02d:%02d", 1900 + lt->tm_year,
+            lt->tm_mon+1, lt->tm_mday, s/3600, (s%3600)/60, s%60);
+ 
+     et = localtime((time_t *) &ssn->last_session_time);
+     s = (ssn->last_session_time + thiszone) % 86400;
+     sprintf(dbsPtr->end_time, "%02d-%02d-%02d %02d:%02d:%02d", 1900 + et->tm_year,
+                et->tm_mon+1, et->tm_mday, s/3600, (s%3600)/60, s%60);
+ 
+     dbsPtr->sip = ntohl(ssn->server.ip);
+     dbsPtr->cip = ntohl(ssn->client.ip);
+     dbsPtr->sport = ssn->server.port;
+     dbsPtr->cport = ssn->client.port;
+     dbsPtr->spackets = ssn->server.pkts_sent;
+     dbsPtr->cpackets = ssn->client.pkts_sent;
+     dbsPtr->sbytes = ssn->server.bytes_sent;
+     dbsPtr->cbytes = ssn->client.bytes_sent;
+     return dbsPtr;
+   }
+ }
+ 
+ DbStats *FlushDbStats(DbStats *dbsPtr)
+ {
+ 
+       char dblogfile[STD_BUF];
+       FILE *dbstats_log;
+ 
+       snprintf(dblogfile, STD_BUF, "%s/ssn_log.%lu",
+         DBLOGDIR, TimeMilliseconds());
+ 
+       if((dbstats_log = fopen(dblogfile, "a")) == NULL )
+          FatalError("Unable to write to '%s': %s\n", dblogfile, strerror(errno));
+ 
+       while (dbsPtr != NULL)
+       {
+         DbStats *tmp;
+         fprintf(dbstats_log, "%lu|%s|%s|%u|%u|%d|%d|%u|%u|%u|%u\n",
+           dbsPtr->xid, dbsPtr->start_time, dbsPtr->end_time, dbsPtr->cip,
+           dbsPtr->sip, dbsPtr->cport, dbsPtr->sport,
+           dbsPtr->cpackets, dbsPtr->cpackets,
+           dbsPtr->spackets, dbsPtr->cbytes, dbsPtr->sbytes);
+ 
+        tmp = dbsPtr->next;
+        free(dbsPtr);
+        dbsPtr = tmp;
+       }
+ 
+     fclose(dbstats_log);
+     LastFlushTime = TimeMilliseconds();
+     return dbsPtr;
+ }
  
  
  static int CompareFunc(ubi_trItemPtr ItemPtr, ubi_trNodePtr NodePtr)
  {
***************
*** 731,736 ****
--- 883,890 ----
      AddFuncToPreprocList(ReassembleStream4);
      AddFuncToCleanExitList(Stream4CleanExitFunction, NULL);
      AddFuncToRestartList(Stream4RestartFunction, NULL);
+ 
+     LastFlushTime = TimeMilliseconds();
  }
  
  void DisplayStream4Config(void) 
***************
*** 837,842 ****
--- 991,1009 ----
                      stats_log->filename = strdup("snort-unified.stats");
                      OpenStatsFile();
                  } 
+                 else if(!strcasecmp(stoks[1], "db"))
+                 {
+                     if(s_toks > 2)
+                     {
+                       s4data.track_stats_flag = STATS_DB;
+                       snprintf(DBLOGDIR,STD_BUF, "%s", stoks[2]);
+                       if( access(DBLOGDIR, 2) != 0)
+                         FatalError("ERROR: ssn log dir '%s' does not exist\n", DBLOGDIR);
+                     } else {
+                       ErrorMessage("Stats mode \"db\" requires a log dir.\n");
+                       s4data.track_stats_flag=0;
+                     }
+                 }
                  else
                  {
                      ErrorMessage("Bad stats mode for stream4, ignoring\n");
***************
*** 2504,2512 ****
--- 2671,2681 ----
      struct tm *lt;
      struct tm *et;
      Session *killme;
+     long currentTime;
  
      sfPerf.sfBase.DeletedSessions++;
      sfPerf.sfBase.TotalSessions--;
+ 
      
      if(ssn == NULL)
          return;
***************
*** 2564,2569 ****
--- 2733,2745 ----
                  ssn->client.port, ssn->client.pkts_sent, 
                  ssn->client.bytes_sent);
      }
+     else if(s4data.track_stats_flag == STATS_DB)
+     {
+        dbsPtr = AddDbStats(dbsPtr, ssn);
+        currentTime = TimeMilliseconds();
+        if (currentTime > (LastFlushTime + FLUSH_DELAY)) 
+          dbsPtr = FlushDbStats(dbsPtr);
+     }
      else if(s4data.track_stats_flag == STATS_BINARY)
      {
          BinStats bs;  /* lets generate some BS */
***************
*** 2648,2655 ****
      free(ssn);
  }
  
- 
- 
  void DeleteSpd(ubi_trRootPtr Root, int log)
  {
      (void)ubi_trKillTree(Root, KillSpd);
--- 2824,2829 ----
***************
*** 2726,2732 ****
--- 2900,2913 ----
      if(s4data.track_stats_flag)
      {
          if(s4data.track_stats_flag != STATS_BINARY)
+         {
+           if(s4data.track_stats_flag == STATS_DB)
+           {
+             dbsPtr = FlushDbStats(dbsPtr);
+           } else {
              fclose(session_log);
+           }
+     }
          else
              if(stats_log != NULL)
                  fclose(stats_log->fp);
***************
*** 3496,3502 ****
      return 0;
  }
  
- 
  void OpenStatsFile()
  {
      time_t curr_time;      /* place to stick the clock data */
--- 3677,3682 ----
***************
*** 3992,3994 ****
--- 4172,4175 ----
          }
      }
  }
+ 
